rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Coleção 'users': Ler autenticado, escrever próprio doc
    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == userId;
    }

    // Coleção 'chats'
    match /chats/{chatId} {

      // --- PERMISSÕES PARA OPERAÇÕES NA COLEÇÃO 'chats' (Ex: Listar) ---
      // Permite LISTAR (ler múltiplos docs) SE a query filtrar por 'participants'
      // contendo o UID do usuário autenticado.
      // Nota: 'read' cobre 'get' (ler um doc) e 'list' (ler múltiplos)
      allow read: if request.auth != null && request.auth.uid in resource.data.participants; // <<< Permite ler docs individuais se participante

      // --- PERMISSÕES PARA OPERAÇÕES EM DOCUMENTOS ESPECÍFICOS DENTRO DE 'chats' ---
      // (Estas regras agora são parcialmente redundantes com a de cima, mas podem
      //  ser mantidas para clareza ou se houver regras de escrita mais específicas)

      // Ler Doc Específico: Se participante (redundante com allow read acima, mas ok)
      // allow get: if request.auth != null && isChatParticipant(chatId, request.auth.uid);

      // Escrever (Criar/Atualizar Metadados): Se participante
      allow write: if request.auth != null && isChatParticipant(chatId, request.auth.uid);

      // Subcoleção 'messages' (sem alterações aqui)
      match /messages/{messageId} {
        allow read: if request.auth != null && isChatParticipant(chatId, request.auth.uid);
        allow create: if request.auth != null
                      && request.resource.data.senderId == request.auth.uid
                      && isChatParticipant(chatId, request.auth.uid)
                      && request.resource.data.text is string && request.resource.data.text.size() > 0
                      && request.resource.data.recipientId is string
                      && request.resource.data.isRead == false
                      && request.resource.data.createdAt == request.time;
        allow update: if request.auth != null
                      && isChatParticipant(chatId, request.auth.uid)
                      && request.resource.data.recipientId == request.auth.uid
                      && request.resource.data.isRead == true
                      && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['isRead']);
        allow delete: if false;
      }
    }

    // Função auxiliar (sem alterações)
    function isChatParticipant(chatDocumentId, userId) {
      let parts = chatDocumentId.split('_');
      return parts.size() == 3 && parts[0] == "chat" && (parts[1] == userId || parts[2] == userId);
    }
  }
}